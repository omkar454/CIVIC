// models/TextAddressReport.js
import mongoose from "mongoose";

// -----------------------------
// Media Schema for status updates
// -----------------------------
const StatusMediaSchema = new mongoose.Schema({
  url: { type: String, required: true },
  mime: { type: String, required: true },
  uploadedBy: { type: String, enum: ["citizen", "officer"], required: true },
  uploadedAt: { type: Date, default: Date.now },
});

// -----------------------------
// Status History Schema (extended for audit/timeline)
// -----------------------------
const StatusHistorySchema = new mongoose.Schema({
  status: { type: String, required: true }, // e.g. "In Progress", "Resolved"
  stage: { type: String, default: "" }, // human-friendly stage label, e.g. "Citizen Submitted", "Admin Verified", "Officer Resolved"
  by: { type: mongoose.Schema.Types.ObjectId, ref: "User" }, // user who performed the action (if applicable)
  actorRole: {
    type: String,
    enum: ["citizen", "officer", "admin", ""],
    default: "",
  }, // role of the actor
  note: { type: String, default: "" }, // any note/reason provided
  media: [StatusMediaSchema], // proof media attached to this status change
  at: { type: Date, default: Date.now }, // timestamp
  autoGenerated: { type: Boolean, default: false }, // true if system-added
});


// -----------------------------
// Comment Schema
// -----------------------------
const CommentSchema = new mongoose.Schema({
  message: { type: String, required: true },
  by: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
  reply: { type: String, default: "" },
  repliedBy: { type: mongoose.Schema.Types.ObjectId, ref: "User" },
  createdAt: { type: Date, default: Date.now },
});

// -----------------------------
// Media Schema
// -----------------------------
const MediaSchema = new mongoose.Schema({
  url: { type: String },
  mime: { type: String },
  uploadedBy: { type: String, enum: ["citizen", "officer"] },
});

// -----------------------------
// Admin Verification Schema (Officer workflow)
// -----------------------------
const AdminVerificationSchema = new mongoose.Schema({
  verified: { type: Boolean, default: null },
  note: { type: String, default: "" },
  verifiedAt: { type: Date },
  history: [
    {
      admin: { type: mongoose.Schema.Types.ObjectId, ref: "User" },
      action: { type: String, enum: ["approved", "rejected"] },
      note: { type: String },
      createdAt: { type: Date, default: Date.now },
    },
  ],
});

// -----------------------------
// Citizen Admin Verification Schema (for citizen reports)
// -----------------------------
const CitizenAdminVerificationSchema = new mongoose.Schema({
  verified: { type: Boolean, default: null },
  note: { type: String, default: "" },
  verifiedAt: { type: Date },
  history: [
    {
      admin: { type: mongoose.Schema.Types.ObjectId, ref: "User" },
      action: { type: String, enum: ["approved", "rejected"] },
      note: { type: String },
      createdAt: { type: Date, default: Date.now },
    },
  ],
});

// -----------------------------
// Main TextAddressReport Schema
// -----------------------------
const TextAddressReportSchema = new mongoose.Schema(
  {
    title: { type: String, required: true, trim: true },
    description: { type: String, required: true, trim: true },
    category: {
      type: String,
      required: true,
      enum: [
        "pothole",
        "garbage",
        "streetlight",
        "water-logging",
        "toilet",
        "water-supply",
        "drainage",
        "waste-management",
        "park",
        "other",
      ],
    },
    severity: { type: Number, min: 1, max: 5, default: 3 },
    department: { type: String, default: "general" },
    assignedTo: { type: mongoose.Schema.Types.ObjectId, ref: "User" },

    address: { type: String, required: true, trim: true },
    media: [MediaSchema],
    reporter: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
      required: true,
    },
    votes: { type: Number, default: 0 },
    voters: [{ type: mongoose.Schema.Types.ObjectId, ref: "User" }],

    status: {
      type: String,
      enum: ["Open", "Acknowledged", "In Progress", "Resolved", "Rejected"],
      default: "Open",
    },
    statusHistory: [StatusHistorySchema],
    comments: [CommentSchema],
    priorityScore: { type: Number, default: 0 },
    questionToOfficer: { type: String, default: "" },
    officerProofMedia: [{ url: String, mime: String }],

    adminVerification: AdminVerificationSchema, // officer workflow
    citizenAdminVerification: CitizenAdminVerificationSchema, // citizen report workflow
  },
  { timestamps: true }
);

TextAddressReportSchema.pre("save", function (next) {
  const severity = this.severity || 3;
  const votes = this.votes || 0;
  this.priorityScore = severity * 10 + votes * 5;
  next();
});

export default mongoose.model("TextAddressReport", TextAddressReportSchema);
